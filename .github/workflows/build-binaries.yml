name: Precompile Binaries

on:
  push:
    branches: [main, develop]
    paths:
      - .github/workflows/build-binaries.yml
      - 'build-configs/**'
  schedule:
    # Build weekly on Sunday at 2 AM UTC to get latest dependencies
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      php_version:
        description: PHP Version to build
        required: false
        default: 8.4.11
        type: string
      force_rebuild:
        description: Force rebuild even if binary exists
        required: false
        default: false
        type: boolean

env:
  REGISTRY_URL: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # First job: Get dynamic PHP versions from ts-pkgx
  get-php-versions:
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.get-versions.outputs.php_versions }}
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get PHP versions from ts-pkgx
        id: get-versions
        run: |
          # Get dynamic PHP versions using published ts-pkgx package
          PHP_VERSIONS=$(bunx ts-pkgx get-php-versions)
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "🔍 Dynamic PHP versions: $PHP_VERSIONS"

  # Matrix strategy for building across different platforms and configurations
  build-matrix:
    needs: get-php-versions
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13] # Include Intel Mac
        php_version: ${{ fromJSON(needs.get-php-versions.outputs.php_versions) }}
        config: [laravel-mysql, laravel-postgres, laravel-sqlite, api-only, enterprise, wordpress]
        include:
          # Add Windows later if needed
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: macos-13
            platform: darwin
            arch: x86_64
        exclude:
          # Skip some combinations to reduce build time
          - os: macos-13
            config: api-only
          # WordPress mainly used on Linux
          - os: macos-13
            config: wordpress

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "Building PHP ${{ matrix.php_version }} for ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "Configuration: ${{ matrix.config }}"
          echo "BINARY_NAME=php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}" >> $GITHUB_ENV
          echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
          echo "OUTPUT_DIR=${{ github.workspace }}/binaries" >> $GITHUB_ENV

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Use cached node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            node-modules-

      - name: Install Dependencies
        run: bun install

      - name: Install build dependencies (Ubuntu)
        if: matrix.platform == 'linux'
        run: |
          # Install PHP dependencies via Launchpad with enhanced debugging
          echo "🔧 Installing PHP dependencies via Launchpad..."
          echo "🔍 Debug info:"
          echo "  - Platform: linux"
          echo "  - Architecture: $(uname -m)"
          echo "  - Network connectivity test:"
          # Temporarily modify PATH to prioritize system binaries over launchpad binaries
          export PATH="/usr/bin:/usr/local/bin:/bin:$PATH"
          curl -I --connect-timeout 10 https://dist.pkgx.dev/ || echo "  ⚠️ Network connectivity issues detected"

          # Set environment variables for better debugging
          export LAUNCHPAD_DEBUG=1
          export LAUNCHPAD_VERBOSE=1

          ./launchpad install php --deps-only --verbose

          # Alternative: Use apt-get for manual dependency installation
          # sudo apt-get update
          # sudo apt-get install -y \
          #   build-essential \
          #   autoconf \
          #   automake \
          #   libtool \
          #   pkg-config \
          #   bison \
          #   re2c \
          #   libxml2-dev \
          #   libssl-dev \
          #   libcurl4-openssl-dev \
          #   libpng-dev \
          #   libjpeg-dev \
          #   libfreetype6-dev \
          #   libonig-dev \
          #   libzip-dev \
          #   libsqlite3-dev \
          #   libpq-dev \
          #   libreadline-dev \
          #   libbz2-dev \
          #   libgmp-dev \
          #   libldap2-dev \
          #   libsasl2-dev \
          #   libxslt1-dev \
          #   libicu-dev \
          #   libsodium-dev \
          #   zlib1g-dev

      - name: Install build dependencies (macOS)
        if: matrix.platform == 'darwin'
        run: |
          # Install PHP dependencies via Launchpad with enhanced debugging
          echo "🔧 Installing PHP dependencies via Launchpad..."
          echo "🔍 Debug info:"
          echo "  - Platform: darwin"
          echo "  - Architecture: $(uname -m)"
          echo "  - Network connectivity test:"
          # Temporarily modify PATH to prioritize system binaries over launchpad binaries
          export PATH="/usr/bin:/usr/local/bin:/bin:$PATH"
          curl -I --connect-timeout 10 https://dist.pkgx.dev/ || echo "  ⚠️ Network connectivity issues detected"

          # Set environment variables for better debugging
          export LAUNCHPAD_DEBUG=1
          export LAUNCHPAD_VERBOSE=1

          ./launchpad install php --deps-only --verbose

          # Alternative: Use Homebrew for manual dependency installation
          # brew install \
          #   autoconf \
          #   automake \
          #   libtool \
          #   pkg-config \
          #   bison \
          #   re2c \
          #   libxml2 \
          #   openssl@3 \
          #   curl \
          #   libpng \
          #   jpeg \
          #   freetype \
          #   oniguruma \
          #   libzip \
          #   postgresql \
          #   readline \
          #   bzip2 \
          #   gmp \
          #   openldap \
          #   libxslt \
          #   icu4c \
          #   libsodium \
          #   zlib \
          #   libiconv

      - name: Create build configuration
        run: |
          mkdir -p ${{ env.BUILD_DIR }} ${{ env.OUTPUT_DIR }}

                    # Create configuration based on matrix config
          case "${{ matrix.config }}" in
            "laravel-mysql")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-mysql --with-mysqli --enable-curl --with-openssl --enable-gd --with-zip --with-readline --enable-libxml --with-zlib"
              ;;
            "laravel-postgres")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-pgsql --with-pgsql --enable-curl --with-openssl --enable-gd --with-zip --with-readline --enable-libxml --with-zlib"
              ;;
            "laravel-sqlite")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-sqlite --with-sqlite3 --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              ;;
            "api-only")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-bcmath --with-pdo-mysql --with-mysqli --with-curl --with-openssl --with-zip --with-libxml --with-zlib"
              ;;
            "enterprise")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-mysql --with-pdo-pgsql --with-pdo-sqlite --with-mysqli --with-pgsql --with-sqlite3 --with-curl --with-openssl --enable-gd --enable-soap --enable-sockets --with-zip --with-bz2 --with-readline --with-libxml --with-zlib --enable-pcntl --enable-posix --with-gettext --with-gmp --with-ldap --with-xsl --with-sodium"
              ;;
            "wordpress")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --with-pdo-mysql --with-mysqli --with-curl --with-openssl --enable-gd --with-zip --with-libxml --with-zlib"
              ;;
          esac

          echo "CONFIGURE_EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: Set macOS specific paths
        if: matrix.platform == 'darwin'
        run: |
          # Set paths for Homebrew dependencies
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix libxml2)/lib/pkgconfig:$(brew --prefix icu4c)/lib/pkgconfig" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix bison)/bin:$(brew --prefix)/bin:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib -L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix)/include -I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      - name: Download and extract PHP source
        run: |
          cd ${{ env.BUILD_DIR }}
          # Temporarily modify PATH to prioritize system binaries over launchpad binaries
          # This prevents conflicts with launchpad-installed binaries that may have library dependencies
          export PATH="/usr/bin:/usr/local/bin:/bin:$PATH"
          # Use system curl instead of launchpad curl to avoid library conflicts
          curl -fsSL "https://www.php.net/distributions/php-${{ matrix.php_version }}.tar.gz" -o php.tar.gz
          tar -xzf php.tar.gz
          cd php-${{ matrix.php_version }}
          echo "PHP_SOURCE_DIR=${{ env.BUILD_DIR }}/php-${{ matrix.php_version }}" >> $GITHUB_ENV

      - name: Configure PHP build
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}

          # Create installation directory
          INSTALL_PREFIX="${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}"
          mkdir -p "$INSTALL_PREFIX"

          # Configure with platform-specific options
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            # On macOS, point to Homebrew iconv installation
            EXTRA_CONFIG="--with-iconv=$(brew --prefix libiconv)"
          else
            # On Linux, explicitly enable iconv (usually available in system)
            EXTRA_CONFIG="--with-iconv"
          fi

          echo "Configuring PHP with:"
          echo "  Extensions: ${{ env.CONFIGURE_EXTENSIONS }}"
          echo "  Prefix: $INSTALL_PREFIX"
          echo "  Extra config: $EXTRA_CONFIG"

          ./configure \
            --prefix="$INSTALL_PREFIX" \
            --disable-debug \
            --enable-shared \
            --with-pic \
            ${{ env.CONFIGURE_EXTENSIONS }} \
            $EXTRA_CONFIG

      - name: Build PHP
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}

          # Use all available CPU cores for faster builds
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            JOBS=$(sysctl -n hw.ncpu)
          else
            JOBS=$(nproc)
          fi

          echo "Building PHP with $JOBS parallel jobs"
          make -j$JOBS

      - name: Install PHP
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}
          make install

          # Verify installation
          INSTALL_PREFIX="${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}"
          "$INSTALL_PREFIX/bin/php" --version
          "$INSTALL_PREFIX/bin/php" -m # Show loaded modules

      - name: Create binary package
        run: |
          cd ${{ env.OUTPUT_DIR }}

          # Create metadata file
          cat > ${{ env.BINARY_NAME }}/metadata.json << EOF
          {
            "php_version": "${{ matrix.php_version }}",
            "platform": "${{ matrix.platform }}",
            "architecture": "${{ matrix.arch }}",
            "configuration": "${{ matrix.config }}",
            "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "built_by": "GitHub Actions",
            "commit": "${{ github.sha }}",
            "extensions": "$(echo '${{ env.CONFIGURE_EXTENSIONS }}' | tr ' ' '\n' | grep -E '^--(enable|with)-' | sed 's/^--[^-]*-//' | sort | tr '\n' ',' | sed 's/,$//')"
          }
          EOF

          # Create tarball
          tar -czf ${{ env.BINARY_NAME }}.tar.gz ${{ env.BINARY_NAME }}/

          # Show package info
          echo "Created package: ${{ env.BINARY_NAME }}.tar.gz"
          ls -lh ${{ env.BINARY_NAME }}.tar.gz

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}.tar.gz
          retention-days: 90

      - name: Upload to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY_URL }} -u ${{ env.REGISTRY_USERNAME }} --password-stdin

          # Create a simple Dockerfile for the binary
          cd ${{ env.OUTPUT_DIR }}
          cat > Dockerfile << EOF
          FROM scratch
          COPY ${{ env.BINARY_NAME }}.tar.gz /php-binary.tar.gz
          EOF

          # Build and push
          IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/php-binaries:${{ env.BINARY_NAME }}"
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"

  # Release job to create GitHub releases with binaries
  create-release:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Create release manifest
        run: |
          cd binaries/

          # Create a manifest of all built binaries
          cat > manifest.json << EOF
          {
            "version": "$(date +%Y.%m.%d)",
            "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "binaries": [
          EOF

          first=true
          for dir in */; do
            if [[ -f "$dir"*.tar.gz ]]; then
              if [[ $first == "false" ]]; then
                echo "," >> manifest.json
              fi
              tarball=$(ls "$dir"*.tar.gz | head -1)
              filename=$(basename "$tarball")
              size=$(stat -c%s "$tarball" 2>/dev/null || stat -f%z "$tarball")

              # Extract metadata from tarball if available
              tar -xzOf "$tarball" "*/metadata.json" > temp_metadata.json 2>/dev/null || echo '{}' > temp_metadata.json

              echo "      {" >> manifest.json
              echo "        \"filename\": \"$filename\"," >> manifest.json
              echo "        \"size\": $size," >> manifest.json
              cat temp_metadata.json | sed 's/^/        /' | sed '1s/^        {//' | sed '$s/$//' >> manifest.json
              echo "      }" >> manifest.json
              first=false
            fi
          done

          echo "    ]" >> manifest.json
          echo "  }" >> manifest.json

          cat manifest.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: binaries-${{ github.run_number }}
          name: PHP Precompiled Binaries - Build ${{ github.run_number }}
          body: |
            🚀 **PHP Precompiled Binaries**

                        This release contains precompiled PHP binaries optimized for Laravel and modern PHP frameworks:

            - **Platforms**: Linux (x86_64), macOS (ARM64 & Intel)
            - **PHP Versions**: 8.4.11, 8.3.14, 8.2.26, 8.1.30
            - **Laravel-Optimized Configurations**:
              - `laravel-mysql`: Laravel with MySQL/MariaDB (most common)
              - `laravel-postgres`: Laravel with PostgreSQL (enterprise)
              - `laravel-sqlite`: Laravel with SQLite (development/testing)
              - `api-only`: API-only applications (minimal footprint)
              - `enterprise`: Full-featured Laravel with all extensions
              - `wordpress`: WordPress optimized build

            📦 **Usage with Launchpad**:
            These binaries are automatically downloaded by Launchpad instead of compiling from source.

            🔧 **Built from commit**: ${{ github.sha }}

            See `manifest.json` for detailed information about each binary.
          files: |
            binaries/**/*.tar.gz
            binaries/manifest.json
          draft: false
          prerelease: false
