name: Precompile PHP

on:
  push:
    schedule:
      # Check for updates daily at 2 AM UTC
      - cron: '0 2 * * *'
    branches: [main]
  workflow_dispatch:
    inputs:
      php_version:
        description: 'PHP version to build (leave empty for auto-detection)'
        required: false
        type: string
      php_config:
        description: 'PHP build configuration'
        required: true
        default: 'laravel-mysql'
        type: choice
        options:
          - laravel-mysql
          - laravel-postgres
          - laravel-sqlite
          - api-only
          - enterprise
          - wordpress
          - full-stack
      force_rebuild:
        description: 'Force rebuild even if no updates'
        required: false
        default: false
        type: boolean

jobs:
  # First job: Check if we need to rebuild based on new PHP versions
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      rebuild_needed: ${{ steps.check-updates.outputs.rebuild_needed }}
      reason: ${{ steps.check-updates.outputs.reason }}
      current_versions: ${{ steps.check-updates.outputs.current_versions }}
      latest_versions: ${{ steps.check-updates.outputs.latest_versions }}
      new_versions: ${{ steps.check-updates.outputs.new_versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Check for PHP updates
        id: check-updates
        run: |
          # Check if there are new PHP versions available
          UPDATE_CHECK=$(bun scripts/check-php-updates.ts)

          # Extract outputs for GitHub Actions
          REBUILD_NEEDED=$(echo "$UPDATE_CHECK" | grep "rebuild_needed=" | cut -d'=' -f2)
          REASON=$(echo "$UPDATE_CHECK" | grep "reason=" | cut -d'=' -f2-)
          CURRENT_VERSIONS=$(echo "$UPDATE_CHECK" | grep "current_versions=" | cut -d'=' -f2-)
          LATEST_VERSIONS=$(echo "$UPDATE_CHECK" | grep "latest_versions=" | cut -d'=' -f2-)
          NEW_VERSIONS=$(echo "$UPDATE_CHECK" | grep "new_versions=" | cut -d'=' -f2-)

          echo "rebuild_needed=$REBUILD_NEEDED" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "current_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
          echo "latest_versions=$LATEST_VERSIONS" >> $GITHUB_OUTPUT
          echo "new_versions=$NEW_VERSIONS" >> $GITHUB_OUTPUT

          echo "$UPDATE_CHECK"

  # Second job: Get dynamic PHP versions from ts-pkgx (only if rebuild is needed)
  get-php-versions:
    needs: check-for-updates
    runs-on: ubuntu-latest
    if: needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true' || github.event.inputs.php_version != ''
    outputs:
      php_versions: ${{ steps.get-versions.outputs.php_versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get PHP versions from ts-pkgx
        id: get-versions
        run: |
          if [ -n "${{ github.event.inputs.php_version }}" ]; then
            # Use specific version if provided
            PHP_VERSIONS='["${{ github.event.inputs.php_version }}"]'
          else
            # Get dynamic PHP versions using our custom script
            PHP_VERSIONS=$(bun scripts/get-php-versions.ts | grep "JSON output for GitHub Actions:" -A 1 | tail -1)
          fi
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "🔍 Dynamic PHP versions: $PHP_VERSIONS"

  build:
    needs: [check-for-updates, get-php-versions]
    if: needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true' || github.event.inputs.php_version != ''
    strategy:
      fail-fast: false
      matrix:
        php_version: ${{ fromJson(needs.get-php-versions.outputs.php_versions) }}
        config:
          - laravel-mysql
          - laravel-postgres
          - laravel-sqlite
          - api-only
          - enterprise
          - wordpress
          - full-stack
        os:
          - ubuntu-latest
          - macos-13
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: macos-13
            platform: darwin
            arch: x86_64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x86_64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install build dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool pkg-config bison re2c libxml2-dev libssl-dev libcurl4-openssl-dev libpng-dev libjpeg-dev libfreetype6-dev libonig-dev libzip-dev libpq-dev libreadline-dev libbz2-dev libgmp-dev libldap2-dev libxslt1-dev libicu-dev libsodium-dev zlib1g-dev

      - name: Install build dependencies (macOS)
        if: matrix.platform == 'darwin'
        run: |
          # Fallback to Homebrew for reliable CI builds
          brew install autoconf automake libtool pkg-config bison re2c libxml2 openssl curl libpng jpeg freetype oniguruma libzip postgresql readline bzip2 gmp openldap libxslt icu4c libsodium zlib gettext
          # Set up environment for Homebrew tools
          echo "/opt/homebrew/bin:/usr/local/bin:$PATH" >> $GITHUB_PATH
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Install build dependencies (Windows)
        if: matrix.platform == 'win32'
        run: |
          # Windows: Install Visual Studio Build Tools and dependencies
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended"
          choco install -y 7zip
          # Note: PHP on Windows requires Visual Studio for nmake

      - name: Build PHP
        env:
          PHP_VERSION: ${{ matrix.php_version }}
          PHP_CONFIG: ${{ matrix.config }}
          TARGET_PLATFORM: ${{ matrix.platform }}
          TARGET_ARCH: ${{ matrix.arch }}
          BUILD_DIR: ${{ github.workspace }}/build
          OUTPUT_DIR: ${{ github.workspace }}/binaries
        run: bun run scripts/build-php-simple.ts

      - name: Create tarball
        run: |
          cd binaries
          BINARY_NAME="php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}"
          if [ -d "$BINARY_NAME" ]; then
            # Create metadata file
            echo '{"php_version":"${{ matrix.php_version }}","platform":"${{ matrix.platform }}","arch":"${{ matrix.arch }}","config":"${{ matrix.config }}","built_at":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > "$BINARY_NAME/metadata.json"

            # Create tarball
            tar -czf "$BINARY_NAME.tar.gz" "$BINARY_NAME"
            echo "✅ Created tarball: $BINARY_NAME.tar.gz"
            ls -lh "$BINARY_NAME.tar.gz"
          else
            echo "❌ Binary directory not found: $BINARY_NAME"
            exit 1
          fi

      - name: Test PHP Binary
        run: |
          BINARY_NAME="php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}"
          if [ -f "binaries/$BINARY_NAME/bin/php" ]; then
            echo "✅ PHP binary created successfully"
            binaries/$BINARY_NAME/bin/php --version
            binaries/$BINARY_NAME/bin/php -m | head -20
          else
            echo "❌ PHP binary not found"
            exit 1
          fi

      - name: Upload PHP Binary
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
          path: binaries/php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}.tar.gz
          retention-days: 30

  # Release job to create GitHub releases with binaries
  create-release:
    needs: [check-for-updates, build, get-php-versions]
    runs-on: ubuntu-latest
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch') && (needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get PHP versions
        id: get-versions
        run: |
          # Get dynamic PHP versions using our custom script
          PHP_VERSIONS=$(bun scripts/get-php-versions.ts | grep "JSON output for GitHub Actions:" -A 1 | tail -1)
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "🔍 Dynamic PHP versions: $PHP_VERSIONS"

      - name: Format PHP versions for release
        id: format-versions
        run: |
          # Convert JSON array to comma-separated string
          PHP_VERSIONS_JSON='${{ needs.get-php-versions.outputs.php_versions }}'
          PHP_VERSIONS_STRING=$(echo "$PHP_VERSIONS_JSON" | jq -r 'join(", ")')
          echo "php_versions_string=$PHP_VERSIONS_STRING" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Create release manifest
        run: |
          cd binaries/

          # Debug: Show what we have
          echo "🔍 Current directory structure:"
          ls -la
          echo ""
          echo "🔍 Looking for tar.gz files:"
          find . -name "*.tar.gz" -type f
          echo ""

          # Create a temporary JSON array file
          echo "[]" > binaries_array.json

          # Find all tar.gz files recursively and process them
          for tarball in $(find . -name "*.tar.gz" -type f); do
            filename=$(basename "$tarball")
            size=$(stat -c%s "$tarball" 2>/dev/null || stat -f%z "$tarball")

            echo "Processing: $filename (size: $size bytes)"

            # Extract metadata from tarball if available
            tar -xzOf "$tarball" "*/metadata.json" > temp_metadata.json 2>/dev/null || echo '{}' > temp_metadata.json

            # Parse the binary name to extract components
            # Expected format: php-8.4.11-darwin-arm64-laravel-mysql.tar.gz
            binary_name=$(echo "$filename" | sed 's/\.tar\.gz$//')

            # Extract components from binary name
            if [[ "$binary_name" =~ ^php-([^-]+)-([^-]+)-([^-]+)-(.+)$ ]]; then
              php_version="${BASH_REMATCH[1]}"
              platform="${BASH_REMATCH[2]}"
              architecture="${BASH_REMATCH[3]}"
              configuration="${BASH_REMATCH[4]}"
            else
              # Fallback if pattern doesn't match
              php_version="unknown"
              platform="unknown"
              architecture="unknown"
              configuration="unknown"
            fi

            # Create JSON object for this binary
            binary_json=$(jq -n \
              --arg filename "$filename" \
              --arg size "$size" \
              --arg php_version "$php_version" \
              --arg platform "$platform" \
              --arg architecture "$architecture" \
              --arg configuration "$configuration" \
              --arg built_at "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg extensions "$(cat temp_metadata.json | jq -r '.extensions // ""' 2>/dev/null || echo '')" \
              '{
                filename: $filename,
                size: ($size | tonumber),
                php_version: $php_version,
                platform: $platform,
                architecture: $architecture,
                configuration: $configuration,
                built_at: $built_at,
                extensions: $extensions
              }')

            # Add this binary to the array using jq
            jq --argjson binary "$binary_json" '. += [$binary]' binaries_array.json > temp_array.json
            mv temp_array.json binaries_array.json
          done

          # Create the final manifest with proper structure and sorted binaries
          jq --arg version "$(date +%Y.%m.%d)" \
             --arg built_at "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             --arg commit "${{ github.sha }}" \
             '{
               version: $version,
               built_at: $built_at,
               commit: $commit,
               binaries: (. | sort_by(.php_version))
             }' binaries_array.json > manifest.json

          # Clean up temporary files
          rm -f binaries_array.json temp_metadata.json

          echo ""
          echo "📋 Generated manifest.json:"
          cat manifest.json
          echo ""
          echo "📊 Summary:"
          echo "  - Total binaries found: $(find . -name "*.tar.gz" -type f | wc -l)"
          echo "  - Manifest file size: $(stat -c%s manifest.json 2>/dev/null || stat -f%z manifest.json) bytes"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: binaries-${{ github.run_number }}
          name: PHP Binaries - Build ${{ github.run_number }}
          body: |
            🚀 **PHP Precompiled Binaries**

            > This release contains precompiled PHP binaries optimized for modern PHP usage

            - **Platforms**: Linux (x86_64), macOS (ARM64 & Intel)
            - **PHP Versions**: ${{ steps.format-versions.outputs.php_versions_string }}
            - **Configuration Options**:
              - `laravel-mysql`: Laravel applications using MySQL or MariaDB
              - `laravel-postgres`: Laravel applications using PostgreSQL
              - `laravel-sqlite`: Laravel applications using SQLite
              - `api-only`: Minimal footprint for API-only applications
              - `enterprise`: Full-featured configuration for enterprise applications
              - `wordpress`: WordPress optimized build
              - `full-stack`: Complete PHP build with major extensions and database drivers

            📦 **Usage with Launchpad**:
            You may use these however, but if you are looking for automation, these binaries are automatically downloaded by Launchpad instead of compiling from source.

            🔧 **Built from commit**: ${{ github.sha }}
            🔄 **Update Reason**: ${{ needs.check-for-updates.outputs.reason }}

            See `manifest.json` for detailed information about each binary.
          files: |
            binaries/**/*.tar.gz
            binaries/manifest.json
          draft: false
          prerelease: false
