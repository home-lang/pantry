name: Precompile PHP

on:
  push:
    branches: [main, develop]
    paths:
      - .github/workflows/precompile-php.yml
      - build-configs/**
      - scripts/get-php-versions.ts
      - scripts/check-php-updates.ts
  schedule:
    # Check for updates daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: Force rebuild even if no new versions
        required: false
        default: false
        type: boolean

env:
  REGISTRY_URL: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # First job: Check if we need to rebuild based on new PHP versions
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      rebuild_needed: ${{ steps.check-updates.outputs.rebuild_needed }}
      reason: ${{ steps.check-updates.outputs.reason }}
      current_versions: ${{ steps.check-updates.outputs.current_versions }}
      latest_versions: ${{ steps.check-updates.outputs.latest_versions }}
      new_versions: ${{ steps.check-updates.outputs.new_versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Check for PHP updates
        id: check-updates
        run: |
          # Check if there are new PHP versions available
          UPDATE_CHECK=$(bun scripts/check-php-updates.ts)

          # Extract outputs for GitHub Actions
          REBUILD_NEEDED=$(echo "$UPDATE_CHECK" | grep "rebuild_needed=" | cut -d'=' -f2)
          REASON=$(echo "$UPDATE_CHECK" | grep "reason=" | cut -d'=' -f2-)
          CURRENT_VERSIONS=$(echo "$UPDATE_CHECK" | grep "current_versions=" | cut -d'=' -f2-)
          LATEST_VERSIONS=$(echo "$UPDATE_CHECK" | grep "latest_versions=" | cut -d'=' -f2-)
          NEW_VERSIONS=$(echo "$UPDATE_CHECK" | grep "new_versions=" | cut -d'=' -f2-)

          echo "rebuild_needed=$REBUILD_NEEDED" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "current_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
          echo "latest_versions=$LATEST_VERSIONS" >> $GITHUB_OUTPUT
          echo "new_versions=$NEW_VERSIONS" >> $GITHUB_OUTPUT

          echo "$UPDATE_CHECK"

  # Second job: Get dynamic PHP versions from ts-pkgx (only if rebuild is needed)
  get-php-versions:
    needs: check-for-updates
    runs-on: ubuntu-latest
    if: needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true'
    outputs:
      php_versions: ${{ steps.get-versions.outputs.php_versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get PHP versions from ts-pkgx
        id: get-versions
        run: |
          # Get dynamic PHP versions using our custom script
          PHP_VERSIONS=$(bun scripts/get-php-versions.ts | grep "JSON output for GitHub Actions:" -A 1 | tail -1)
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "üîç Dynamic PHP versions: $PHP_VERSIONS"

  # Job to provide feedback when no rebuild is needed
  no-rebuild-needed:
    needs: check-for-updates
    runs-on: ubuntu-latest
    if: needs.check-for-updates.outputs.rebuild_needed == 'false' && github.event.inputs.force_rebuild != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: No rebuild needed
        run: |
          echo "‚úÖ No rebuild needed"
          echo "Reason: ${{ needs.check-for-updates.outputs.reason }}"
          echo "Current versions: ${{ needs.check-for-updates.outputs.current_versions }}"
          echo "Latest versions: ${{ needs.check-for-updates.outputs.latest_versions }}"
          echo ""
          echo "The workflow will skip building since no new PHP versions are available."
          echo "To force a rebuild, use the 'force_rebuild' input parameter."

  # Matrix strategy for building across different platforms and configurations
  build-matrix:
    needs: [check-for-updates, get-php-versions]
    runs-on: ${{ matrix.os }}
    if: needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13] # Include Intel Mac
        php_version: ${{ fromJSON(needs.get-php-versions.outputs.php_versions) }}
        config: [laravel-mysql, laravel-postgres, laravel-sqlite, api-only, enterprise, wordpress, full-stack]
        include:
          # Add Windows later if needed
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: macos-13
            platform: darwin
            arch: x86_64
        exclude:
          # Skip some combinations to reduce build time
          - os: macos-13
            config: api-only
          # WordPress mainly used on Linux
          - os: macos-13
            config: wordpress

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "Building PHP ${{ matrix.php_version }} for ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "Configuration: ${{ matrix.config }}"
          echo "BINARY_NAME=php-${{ matrix.php_version }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}" >> $GITHUB_ENV
          echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
          echo "OUTPUT_DIR=${{ github.workspace }}/binaries" >> $GITHUB_ENV

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Use cached node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            node-modules-

      - name: Install Dependencies
        run: bun install

      - name: Install build dependencies (Ubuntu)
        if: matrix.platform == 'linux'
        run: |
          # Install PHP dependencies via apt-get (alternative to launchpad)
          echo "üîß Installing PHP dependencies via apt-get..."
          echo "üîç Debug info:"
          echo "  - Platform: linux"
          echo "  - Architecture: $(uname -m)"

          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            bison \
            re2c \
            libxml2-dev \
            libssl-dev \
            libcurl4-openssl-dev \
            libpng-dev \
            libjpeg-dev \
            libfreetype6-dev \
            libonig-dev \
            libzip-dev \
            libsqlite3-dev \
            libpq-dev \
            libreadline-dev \
            libbz2-dev \
            libgmp-dev \
            libldap2-dev \
            libsasl2-dev \
            libxslt1-dev \
            libicu-dev \
            libsodium-dev \
            zlib1g-dev

      - name: Install build dependencies (macOS)
        if: matrix.platform == 'darwin'
        run: |
          # Install PHP dependencies via Homebrew (alternative to launchpad)
          echo "üîß Installing PHP dependencies via Homebrew..."
          echo "üîç Debug info:"
          echo "  - Platform: darwin"
          echo "  - Architecture: $(uname -m)"

          # Install dependencies with quiet output to reduce warnings
          brew install --quiet \
            autoconf \
            automake \
            libtool \
            pkg-config \
            bison \
            re2c \
            libxml2 \
            openssl@3 \
            curl \
            libpng \
            jpeg \
            freetype \
            oniguruma \
            libzip \
            postgresql@17 \
            libpq \
            readline \
            bzip2 \
            gmp \
            openldap \
            libxslt \
            icu4c \
            libsodium \
            zlib \
            libiconv \
            gettext

          # Verify readline installation
          echo "Checking readline installation:"
          ls -la $(brew --prefix readline)/include/readline/readline.h || echo "readline.h not found in expected location"
          ls -la $(brew --prefix readline)/lib/libreadline.* || echo "libreadline not found in expected location"

          # Verify PostgreSQL installation
          echo "Checking PostgreSQL installation:"
          ls -la $(brew --prefix libpq)/include/libpq-fe.h || echo "libpq-fe.h not found in expected location (libpq)"
          ls -la $(brew --prefix libpq)/lib/libpq.* || echo "libpq not found in expected location (libpq)"
          which pg_config || echo "pg_config not found in PATH"

          # Verify bzip2 installation
          echo "Checking bzip2 installation:"
          ls -la $(brew --prefix bzip2)/include/bzlib.h || echo "bzlib.h not found in expected location"
          ls -la $(brew --prefix bzip2)/lib/libbz2.* || echo "libbz2 not found in expected location"

          # Verify gettext installation
          echo "Checking gettext installation:"
          ls -la $(brew --prefix gettext)/include/libintl.h || echo "libintl.h not found in expected location"
          ls -la $(brew --prefix gettext)/lib/libintl.* || echo "libintl not found in expected location"

          # Verify OpenLDAP installation
          echo "Checking OpenLDAP installation:"
          ls -la $(brew --prefix openldap)/include/ldap.h || echo "ldap.h not found in expected location"
          ls -la $(brew --prefix openldap)/lib/libldap.* || echo "libldap not found in expected location"
          ls -la $(brew --prefix openldap)/lib/liblber.* || echo "liblber not found in expected location"
          echo "OpenLDAP include directory contents:"
          ls -la $(brew --prefix openldap)/include/ | head -10
          echo "OpenLDAP lib directory contents:"
          ls -la $(brew --prefix openldap)/lib/ | head -10

          # Create symlinks to help PHP find readline, bzip2, gettext, and openldap
          echo "Creating symlinks for readline, bzip2, gettext, and openldap:"
          sudo mkdir -p /usr/local/include/readline /usr/local/lib
          sudo ln -sf $(brew --prefix readline)/include/readline/readline.h /usr/local/include/readline/readline.h
          sudo ln -sf $(brew --prefix readline)/include/readline/history.h /usr/local/include/readline/history.h
          sudo ln -sf $(brew --prefix readline)/lib/libreadline.* /usr/local/lib/
          sudo ln -sf $(brew --prefix bzip2)/include/bzlib.h /usr/local/include/bzlib.h
          sudo ln -sf $(brew --prefix bzip2)/lib/libbz2.* /usr/local/lib/
          sudo ln -sf $(brew --prefix gettext)/include/libintl.h /usr/local/include/libintl.h
          sudo ln -sf $(brew --prefix gettext)/lib/libintl.* /usr/local/lib/
          sudo ln -sf $(brew --prefix openldap)/include/ldap.h /usr/local/include/ldap.h
          sudo ln -sf $(brew --prefix openldap)/lib/libldap.* /usr/local/lib/
          sudo ln -sf $(brew --prefix openldap)/lib/liblber.* /usr/local/lib/

      - name: Create build configuration
        run: |
          mkdir -p ${{ env.BUILD_DIR }} ${{ env.OUTPUT_DIR }}

          # Determine libpq prefix only on macOS (avoid brew on Linux)
          PG_PREFIX=""
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            PG_PREFIX="$(brew --prefix libpq)"
          fi

          # Create configuration based on matrix config
          case "${{ matrix.config }}" in
            "laravel-mysql")
              # For PHP 8.1, disable intl extension to avoid ICU4C C++17 issues
              if [[ "${{ matrix.php_version }}" == 8.1* ]]; then
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --enable-bcmath --with-pdo-mysql --with-mysqli --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              else
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-mysql --with-mysqli --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              fi
              ;;
            "laravel-postgres")
              # For PHP 8.1, disable intl extension to avoid ICU4C C++17 issues
              if [[ "${{ matrix.php_version }}" == 8.1* ]]; then
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --enable-bcmath --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              else
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              fi
              ;;
            "laravel-sqlite")
              # For PHP 8.1, disable intl extension to avoid ICU4C C++17 issues
              if [[ "${{ matrix.php_version }}" == 8.1* ]]; then
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --enable-bcmath --with-pdo-sqlite --with-sqlite3 --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              else
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-sqlite --with-sqlite3 --with-curl --with-openssl --enable-gd --with-zip --with-readline --with-libxml --with-zlib"
              fi
              ;;
            "api-only")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-bcmath --with-pdo-mysql --with-mysqli --with-curl --with-openssl --with-zip --with-libxml --with-zlib"
              ;;
            "enterprise")
              # For PHP 8.1, disable intl extension to avoid ICU4C C++17 issues
              if [[ "${{ matrix.php_version }}" == 8.1* ]]; then
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --enable-bcmath --with-pdo-mysql --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pdo-sqlite --with-mysqli --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-sqlite3 --with-curl --with-openssl --enable-gd --enable-soap --enable-sockets --with-zip --with-bz2 --with-readline --with-libxml --with-zlib --enable-pcntl --enable-posix --with-gettext --with-gmp --with-ldap --with-xsl --with-sodium"
              else
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --with-pdo-mysql --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pdo-sqlite --with-mysqli --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-sqlite3 --with-curl --with-openssl --enable-gd --enable-soap --enable-sockets --with-zip --with-bz2 --with-readline --with-libxml --with-zlib --enable-pcntl --enable-posix --with-gettext --with-gmp --with-ldap --with-xsl --with-sodium"
              fi
              ;;
            "wordpress")
              EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --with-pdo-mysql --with-mysqli --with-curl --with-openssl --enable-gd --with-zip --with-libxml --with-zlib"
              ;;
            "full-stack")
              # Comprehensive configuration with all major database drivers and extensions for local testing
              # For PHP 8.1, disable intl extension to avoid ICU4C C++17 issues
              if [[ "${{ matrix.php_version }}" == 8.1* ]]; then
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-exif --enable-bcmath --enable-calendar --enable-ftp --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-pdo-mysql --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pdo-sqlite --with-mysqli --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-sqlite3 --with-curl --with-openssl --enable-gd --enable-soap --enable-sockets --with-zip --with-bz2 --with-readline --with-libxml --with-zlib --enable-pcntl --enable-posix --with-gettext --with-gmp --with-ldap --with-xsl --with-sodium --with-iconv --enable-fileinfo --enable-json --enable-phar --enable-filter --enable-hash --enable-session --enable-tokenizer --enable-ctype --enable-dom --enable-simplexml --enable-xml --enable-xmlreader --enable-xmlwriter --enable-shmop"
              else
                EXTENSIONS="--enable-cli --enable-fpm --enable-mbstring --enable-opcache --enable-intl --enable-exif --enable-bcmath --enable-calendar --enable-ftp --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-pdo-mysql --with-pdo-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-pdo-sqlite --with-mysqli --with-pgsql${PG_PREFIX:+=$PG_PREFIX} --with-sqlite3 --with-curl --with-openssl --enable-gd --enable-soap --enable-sockets --with-zip --with-bz2 --with-readline --with-libxml --with-zlib --enable-pcntl --enable-posix --with-gettext --with-gmp --with-ldap --with-xsl --with-sodium --with-iconv --enable-fileinfo --enable-json --enable-phar --enable-filter --enable-hash --enable-session --enable-tokenizer --enable-ctype --enable-dom --enable-simplexml --enable-xml --enable-xmlreader --enable-xmlwriter --enable-shmop"
              fi
              ;;
          esac

          echo "CONFIGURE_EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: Set macOS specific paths
        if: matrix.platform == 'darwin'
        run: |
          # Set paths for Homebrew dependencies including keg-only packages
          # Use a more organized approach to avoid duplicates
          PKG_CONFIG_PATHS=(
            "$(brew --prefix)/lib/pkgconfig"
            "$(brew --prefix openssl@3)/lib/pkgconfig"
            "$(brew --prefix libxml2)/lib/pkgconfig"
            "$(brew --prefix icu4c)/lib/pkgconfig"
            "$(brew --prefix zlib)/lib/pkgconfig"
            "$(brew --prefix postgresql@17)/lib/pkgconfig"
            "$(brew --prefix libpq)/lib/pkgconfig"
            "$(brew --prefix bzip2)/lib/pkgconfig"
            "$(brew --prefix gettext)/lib/pkgconfig"
            "$(brew --prefix openldap)/lib/pkgconfig"
          )
          PKG_CONFIG_PATH_JOINED=$(IFS=:; echo "${PKG_CONFIG_PATHS[*]}")
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH_JOINED" >> $GITHUB_ENV
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH_JOINED"

          PATH_PATHS=(
            "$(brew --prefix bison)/bin"
            "$(brew --prefix)/bin"
            "$(brew --prefix libpq)/bin"
            "$(brew --prefix postgresql@17)/bin"
            "$(brew --prefix gettext)/bin"
          )
          PATH_JOINED=$(IFS=:; echo "${PATH_PATHS[*]}")
          echo "PATH=$PATH_JOINED:$PATH" >> $GITHUB_ENV
          export PATH="$PATH_JOINED:$PATH"

          LDFLAGS_PATHS=(
            "-L$(brew --prefix)/lib"
            "-L$(brew --prefix openssl@3)/lib"
            "-L$(brew --prefix zlib)/lib"
            "-L$(brew --prefix libiconv)/lib"
            "-L$(brew --prefix libpq)/lib"
            "-L$(brew --prefix bzip2)/lib"
            "-L$(brew --prefix gettext)/lib"
            "-L$(brew --prefix openldap)/lib"
          )
          LDFLAGS_JOINED=$(IFS=' '; echo "${LDFLAGS_PATHS[*]}")
          echo "LDFLAGS=$LDFLAGS_JOINED" >> $GITHUB_ENV
          export LDFLAGS="$LDFLAGS_JOINED"

          CPPFLAGS_PATHS=(
            "-I$(brew --prefix)/include"
            "-I$(brew --prefix openssl@3)/include"
            "-I$(brew --prefix zlib)/include"
            "-I$(brew --prefix libiconv)/include"
            "-I$(brew --prefix libpq)/include"
            "-I$(brew --prefix bzip2)/include"
            "-I$(brew --prefix gettext)/include"
            "-I$(brew --prefix openldap)/include"
          )
          CPPFLAGS_JOINED=$(IFS=' '; echo "${CPPFLAGS_PATHS[*]}")
          echo "CPPFLAGS=$CPPFLAGS_JOINED" >> $GITHUB_ENV
          export CPPFLAGS="$CPPFLAGS_JOINED"
          echo "CXXFLAGS=-std=c++17 -stdlib=libc++" >> $GITHUB_ENV
          export CXXFLAGS="-std=c++17 -stdlib=libc++"

          # Set readline-specific paths
          echo "READLINE_CFLAGS=-I$(brew --prefix readline)/include" >> $GITHUB_ENV
          echo "READLINE_LIBS=-L$(brew --prefix readline)/lib -lreadline" >> $GITHUB_ENV
          export READLINE_CFLAGS="-I$(brew --prefix readline)/include"
          export READLINE_LIBS="-L$(brew --prefix readline)/lib -lreadline"

          # Ensure libpq is linked for pg_config availability (keg-only)
          brew link libpq --force || true

          # Check if PostgreSQL is available and working
          echo "Debug: Checking PostgreSQL availability:"
          echo "  PATH: $PATH"
          echo "  Checking pg_config:"
          which pg_config || echo "    pg_config not found in PATH"
          pg_config --version 2>/dev/null || echo "    pg_config version check failed"
          echo "  Checking libpq-fe.h:"
          ls -la $(brew --prefix libpq)/include/libpq-fe.h 2>/dev/null || echo "    libpq-fe.h not found"
          echo "  Checking libpq installation:"
          ls -la $(brew --prefix libpq)/include/ 2>/dev/null | head -5 || echo "    libpq include directory not found"
          ls -la $(brew --prefix libpq)/lib/ 2>/dev/null | head -5 || echo "    libpq lib directory not found"

          if which pg_config >/dev/null 2>&1 && [[ -f "$(brew --prefix libpq)/include/libpq-fe.h" ]]; then
            echo "PostgreSQL found and working"
            echo "POSTGRESQL_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "PostgreSQL not found or not working, will disable PostgreSQL support"
            echo "POSTGRESQL_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Download and extract PHP source
        run: |
          cd ${{ env.BUILD_DIR }}
          # Temporarily modify PATH to prioritize system binaries over launchpad binaries
          # This prevents conflicts with launchpad-installed binaries that may have library dependencies
          export PATH="/usr/bin:/usr/local/bin:/bin:$PATH"
          # Use system curl instead of launchpad curl to avoid library conflicts
          curl -fsSL "https://www.php.net/distributions/php-${{ matrix.php_version }}.tar.gz" -o php.tar.gz
          tar -xzf php.tar.gz
          cd php-${{ matrix.php_version }}
          echo "PHP_SOURCE_DIR=${{ env.BUILD_DIR }}/php-${{ matrix.php_version }}" >> $GITHUB_ENV

      - name: Configure PHP build
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}

          # Create installation directory
          INSTALL_PREFIX="${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}"
          mkdir -p "$INSTALL_PREFIX"

          # Configure with platform-specific options
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            # On macOS, use Homebrew-installed libraries
            # Set environment variables for readline detection
            export CPPFLAGS="$CPPFLAGS -I$(brew --prefix readline)/include"
            export LDFLAGS="$LDFLAGS -L$(brew --prefix readline)/lib"
            export LIBS="$LIBS -lreadline"

            # Set PostgreSQL environment variables and PATH
            export PGSQL_CFLAGS="-I$(brew --prefix libpq)/include"
            export PGSQL_LIBS="-L$(brew --prefix libpq)/lib -lpq"
            export PATH="$(brew --prefix libpq)/bin:$(brew --prefix postgresql@17)/bin:$PATH"

            # Set bzip2 environment variables
            export BZIP2_CFLAGS="-I$(brew --prefix bzip2)/include"
            export BZIP2_LIBS="-L$(brew --prefix bzip2)/lib -lbz2"

            # Set gettext environment variables
            export GETTEXT_CFLAGS="-I$(brew --prefix gettext)/include"
            export GETTEXT_LIBS="-L$(brew --prefix gettext)/lib -lintl"

            # Check if both LDAP libraries are available
            echo "Debug: Checking for lber library:"
            ls -la $(brew --prefix openldap)/lib/liblber.* 2>/dev/null || echo "  lber library not found"
            echo "Debug: Checking for ldap library:"
            ls -la $(brew --prefix openldap)/lib/libldap.* 2>/dev/null || echo "  ldap library not found"

            if [[ -f "$(brew --prefix openldap)/lib/liblber.dylib" ]] && [[ -f "$(brew --prefix openldap)/lib/libldap.dylib" ]]; then
              echo "Both LDAP libraries found, enabling LDAP support"
              LDAP_AVAILABLE=true
            else
              echo "LDAP libraries not found, disabling LDAP support"
              LDAP_AVAILABLE=false
              # Remove LDAP from CONFIGURE_EXTENSIONS
              export CONFIGURE_EXTENSIONS=$(echo "$CONFIGURE_EXTENSIONS" | sed 's/--with-ldap//g' | sed 's/  */ /g')
              echo "Updated CONFIGURE_EXTENSIONS: $CONFIGURE_EXTENSIONS"
            fi

            # Set OpenLDAP environment variables (only if libraries are available)
            if [[ "$LDAP_AVAILABLE" == "true" ]]; then
              export LDAP_CFLAGS="-I$(brew --prefix openldap)/include"
              export LDAP_LIBS="-L$(brew --prefix openldap)/lib -lldap -llber"
              echo "Debug: LDAP_CFLAGS=$LDAP_CFLAGS"
              echo "Debug: LDAP_LIBS=$LDAP_LIBS"
            else
              # Clear LDAP environment variables if not available
              unset LDAP_CFLAGS
              unset LDAP_LIBS
              echo "Debug: LDAP environment variables cleared"
            fi

            # Set C++ standard based on PHP version
            # PHP 8.4+ requires C++17, earlier versions may work with C++14
            PHP_MAJOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f1)
            PHP_MINOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f2)

            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 2 ]]; then
              # PHP 8.2+ requires C++17
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              echo "Using C++17 for PHP ${{ matrix.php_version }}"
            elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              # PHP 8.1 configure step requires C++14, but build step will need C++17 for ICU4C
              export CXXFLAGS="-std=c++14 -stdlib=libc++"
              echo "Using C++14 for PHP ${{ matrix.php_version }} (configure step only)"
            else
              # Earlier PHP versions can use C++14
              export CXXFLAGS="-std=c++14 -stdlib=libc++"
              echo "Using C++14 for PHP ${{ matrix.php_version }}"
            fi

            # Keep CFLAGS clean for C compiler
            export CFLAGS=""
            export CPPFLAGS="$CPPFLAGS"
            echo "Set C++ flags for configure step"
            echo "CXXFLAGS: $CXXFLAGS"
            echo "CFLAGS: $CFLAGS"
            echo "CPPFLAGS: $CPPFLAGS"

            # Ensure we're using clang++ on macOS
            if command -v clang++ >/dev/null 2>&1; then
              export CC=clang
              export CXX=clang++
              echo "Using clang/clang++ compilers"
              echo "CC: $CC"
              echo "CXX: $CXX"
            fi

            # Verify C++ support based on PHP version
            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 4 ]]; then
              echo "Testing C++17 support before configure:"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { std::enable_if_t<true, int> x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++17 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++17 support confirmed before configure"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++17 support test failed before configure"
                rm -f test_cpp.cpp test_cpp
              fi
            elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              echo "Testing C++14 support before configure (PHP 8.1 configure step):"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { typename std::enable_if<true, int>::type x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++14 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++14 support confirmed before configure"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++14 support test failed before configure"
                rm -f test_cpp.cpp test_cpp
              fi
            else
              echo "Testing C++14 support before configure:"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { typename std::enable_if<true, int>::type x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++14 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++14 support confirmed before configure"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++14 support test failed before configure"
                rm -f test_cpp.cpp test_cpp
              fi
            fi

            # Try to find readline.h and set the path explicitly
            READLINE_PATH=$(brew --prefix readline)
            if [[ -f "$READLINE_PATH/include/readline/readline.h" ]]; then
              echo "Found readline.h at $READLINE_PATH/include/readline/readline.h"
              EXTRA_CONFIG="--with-iconv=$(brew --prefix libiconv) --with-readline=$READLINE_PATH"
            else
              echo "readline.h not found, disabling readline support"
              EXTRA_CONFIG="--with-iconv=$(brew --prefix libiconv) --disable-readline"
            fi

            # Check if PostgreSQL is available and working
            echo "Debug: POSTGRESQL_AVAILABLE=$POSTGRESQL_AVAILABLE"
            if [[ "$POSTGRESQL_AVAILABLE" == "true" ]]; then
              echo "PostgreSQL found and working"
            else
              if [[ "${{ matrix.config }}" == "laravel-postgres" ]]; then
                echo "‚ùå PostgreSQL not available; cannot build laravel-postgres binary on this runner"
                exit 1
              fi
              echo "PostgreSQL not found or not working, will disable PostgreSQL support for non-postgres configs"
              # Remove PostgreSQL extensions from CONFIGURE_EXTENSIONS
              export CONFIGURE_EXTENSIONS=$(echo "$CONFIGURE_EXTENSIONS" | sed 's/--with-pdo-pgsql//g' | sed 's/--with-pgsql//g' | sed 's/  */ /g')
              echo "Updated CONFIGURE_EXTENSIONS: $CONFIGURE_EXTENSIONS"
              # Also disable PostgreSQL in the configuration
              EXTRA_CONFIG="$EXTRA_CONFIG --disable-pgsql --disable-pdo-pgsql"
            fi
          else
            # On Linux, use system-installed libraries
            # System libraries should be available via apt-get installation
            echo "Using system libraries installed via apt-get"
            EXTRA_CONFIG=""
          fi

          echo "Configuring PHP with:"
          echo "  Extensions: ${{ env.CONFIGURE_EXTENSIONS }}"
          echo "  Prefix: $INSTALL_PREFIX"
          echo "  Extra config: $EXTRA_CONFIG"

          # Debug: Check readline installation on macOS
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            echo "Debug: Checking readline installation on macOS:"
            echo "  READLINE_CFLAGS: $READLINE_CFLAGS"
            echo "  READLINE_LIBS: $READLINE_LIBS"
            echo "  CPPFLAGS: $CPPFLAGS"
            echo "  LDFLAGS: $LDFLAGS"
            echo "  Checking if readline.h exists:"
            find $(brew --prefix) -name "readline.h" 2>/dev/null || echo "  No readline.h found"

            echo "Debug: Checking PostgreSQL installation on macOS:"
            echo "  PGSQL_CFLAGS: $PGSQL_CFLAGS"
            echo "  PGSQL_LIBS: $PGSQL_LIBS"
            echo "  PATH: $PATH"
            echo "  Checking if pg_config is available:"
            which pg_config || echo "  pg_config not found in PATH"
            pg_config --version 2>/dev/null || echo "  pg_config version check failed"
            echo "  Checking if libpq-fe.h exists:"
            find $(brew --prefix) -name "libpq-fe.h" 2>/dev/null || echo "  No libpq-fe.h found"
          fi

          # Check if libcurl is found via pkg-config
          if pkg-config --exists libcurl; then
            echo "libcurl found via pkg-config"
            CURL_CONFIG=""
          else
            echo "libcurl not found via pkg-config, using system curl"
            CURL_CONFIG=""
          fi

          # Build the final configure extensions based on availability
          FINAL_EXTENSIONS="${{ env.CONFIGURE_EXTENSIONS }}"

          # If PostgreSQL is not available, remove PostgreSQL extensions
          if [[ "${{ matrix.platform }}" == "darwin" ]] && [[ "$POSTGRESQL_AVAILABLE" != "true" ]]; then
            echo "Removing PostgreSQL extensions from configure command"
            FINAL_EXTENSIONS=$(echo "$FINAL_EXTENSIONS" | sed 's/--with-pdo-pgsql//g' | sed 's/--with-pgsql//g' | sed 's/  */ /g')
            echo "Final extensions: $FINAL_EXTENSIONS"
          fi

                    # Set PHP version variables for C++ standard selection
          PHP_MAJOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f1)
          PHP_MINOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f2)

          echo "Configure environment:"
          echo "  CXXFLAGS: $CXXFLAGS"
          echo "  CFLAGS: $CFLAGS"
          echo "  CPPFLAGS: $CPPFLAGS"
          echo "  PHP Version: ${{ matrix.php_version }} (Major: $PHP_MAJOR_VERSION, Minor: $PHP_MINOR_VERSION)"

          # Test C++17 support before configure
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            echo "Testing C++17 support before configure:"
            echo '#include <type_traits>' > test_cpp17.cpp
            echo 'int main() { std::enable_if_t<true, int> x = 0; return x; }' >> test_cpp17.cpp
            if clang++ -std=c++17 -stdlib=libc++ test_cpp17.cpp -o test_cpp17 2>/dev/null; then
              echo "C++17 support confirmed before configure"
              rm -f test_cpp17.cpp test_cpp17
            else
              echo "C++17 support test failed before configure"
              rm -f test_cpp17.cpp test_cpp17
            fi
          fi

                    if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            # Set environment variables for configure
            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 2 ]]; then
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              echo "Set C++17 for configure: $CXXFLAGS"
            elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              # PHP 8.1 configure step uses C++14 (PHP requirement)
              export CXXFLAGS="-std=c++14 -stdlib=libc++"
              echo "Set C++14 for PHP 8.1 configure: $CXXFLAGS"
            else
              export CXXFLAGS="-std=c++14 -stdlib=libc++"
              echo "Set C++14 for configure: $CXXFLAGS"
            fi
            export CFLAGS=""
            export CPPFLAGS="$CPPFLAGS"

            # Also set CC and CXX explicitly
            export CC=clang
            export CXX=clang++
            echo "Set CC=$CC, CXX=$CXX"
          fi

          # Run configure with explicit environment
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            CXXFLAGS="$CXXFLAGS" CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" CC="$CC" CXX="$CXX" ./configure \
              --prefix="$INSTALL_PREFIX" \
              --with-config-file-path="$INSTALL_PREFIX/lib" \
              --with-config-file-scan-dir="$INSTALL_PREFIX/lib/conf.d" \
              --disable-debug \
              --enable-shared \
              --with-pic \
              $FINAL_EXTENSIONS \
              $EXTRA_CONFIG \
              $CURL_CONFIG
          else
            ./configure \
              --prefix="$INSTALL_PREFIX" \
              --with-config-file-path="$INSTALL_PREFIX/lib" \
              --with-config-file-scan-dir="$INSTALL_PREFIX/lib/conf.d" \
              --disable-debug \
              --enable-shared \
              --with-pic \
              $FINAL_EXTENSIONS \
              $EXTRA_CONFIG \
              $CURL_CONFIG
          fi

          # Check the generated Makefile for C++ flags
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            echo "Checking Makefile for C++ flags:"
            grep -E "CXXFLAGS|CXX|std=" Makefile | head -10 || echo "No C++ flags found in Makefile"
          fi

      - name: Build PHP
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}

          # Use all available CPU cores for faster builds
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            JOBS=$(sysctl -n hw.ncpu)
            # Set C++ standard based on PHP version for build
            PHP_MAJOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f1)
            PHP_MINOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f2)

            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 2 ]]; then
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              echo "Set C++17 flags for macOS build"
            elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              # PHP 8.1 needs C++17 for ICU4C compilation
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              echo "Set C++17 flags for PHP 8.1 (ICU4C compatibility)"
            else
              export CXXFLAGS="-std=c++14 -stdlib=libc++"
              echo "Set C++14 flags for macOS build"
            fi

            # Keep CFLAGS clean for C compiler
            export CFLAGS=""
            export CPPFLAGS="$CPPFLAGS"
          else
            JOBS=$(nproc)
          fi

          echo "Building PHP with $JOBS parallel jobs"
          echo "CXXFLAGS: $CXXFLAGS"
          echo "CFLAGS: $CFLAGS"
          echo "CPPFLAGS: $CPPFLAGS"

          # Show what compiler is being used
          echo "Compiler being used:"
          which gcc || which clang || echo "No compiler found"
          echo "C++ compiler:"
          which g++ || which clang++ || echo "No C++ compiler found"

          # Show compiler version and flags
          echo "Compiler info:"
          which gcc || which clang || echo "No compiler found"
          gcc --version 2>/dev/null || clang --version 2>/dev/null || echo "Could not get compiler version"

          # Check available C++ standards
          echo "Checking available C++ standards:"
          if command -v clang++ >/dev/null 2>&1; then
            echo "Available C++ standards for clang++:"
            clang++ --help | grep -E "std=" || echo "Could not determine available standards"
          fi

          # Test C++ support based on PHP version
          PHP_MAJOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f1)
          PHP_MINOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f2)

          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 2 ]]; then
              echo "Testing C++17 support:"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { std::enable_if_t<true, int> x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++17 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++17 support confirmed"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++17 support test failed"
                rm -f test_cpp.cpp test_cpp
              fi
            elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              echo "Testing C++17 support for PHP 8.1 (ICU4C compatibility):"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { std::enable_if_t<true, int> x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++17 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++17 support confirmed for PHP 8.1"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++17 support test failed for PHP 8.1"
                rm -f test_cpp.cpp test_cpp
              fi
            else
              echo "Testing C++14 support:"
              echo '#include <type_traits>' > test_cpp.cpp
              echo 'int main() { typename std::enable_if<true, int>::type x = 0; return x; }' >> test_cpp.cpp
              if clang++ -std=c++14 -stdlib=libc++ test_cpp.cpp -o test_cpp 2>/dev/null; then
                echo "C++14 support confirmed"
                rm -f test_cpp.cpp test_cpp
              else
                echo "C++14 support test failed"
                rm -f test_cpp.cpp test_cpp
              fi
            fi
          fi

          # Pass compiler flags explicitly to make
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            PHP_MAJOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f1)
            PHP_MINOR_VERSION=$(echo "${{ matrix.php_version }}" | cut -d. -f2)

            if [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -ge 2 ]]; then
              echo "Making with explicit C++17 flags:"
              echo "  CXXFLAGS: -std=c++17 -stdlib=libc++"
              echo "  CFLAGS: (empty)"
              echo "  CPPFLAGS: $CPPFLAGS"
              make -j$JOBS CXXFLAGS="-std=c++17 -stdlib=libc++" CFLAGS="" CPPFLAGS="$CPPFLAGS"
                        elif [[ "$PHP_MAJOR_VERSION" -eq 8 && "$PHP_MINOR_VERSION" -eq 1 ]]; then
              echo "Making with explicit C++17 flags for PHP 8.1 (ICU4C compatibility):"
              echo "  CXXFLAGS: -std=c++17 -stdlib=libc++"
              echo "  CFLAGS: (empty)"
              echo "  CPPFLAGS: $CPPFLAGS"

                            # Force update Makefile for PHP 8.1 to use C++17
              echo "Updating Makefile for PHP 8.1 C++17 compatibility..."
              sed -i.bak 's/-std=c++14/-std=c++17/g' Makefile 2>/dev/null || echo "No C++14 flags found in Makefile to replace"
              sed -i.bak 's/-std=gnu++14/-std=gnu++17/g' Makefile 2>/dev/null || echo "No gnu++14 flags found in Makefile to replace"

              # Set environment variables to force C++17
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              export CFLAGS=""
              export CC=clang
              export CXX=clang++
              echo "Final CXXFLAGS: $CXXFLAGS"

              # Also update the Makefile to force C++17 for all compilation rules
              echo "Forcing C++17 in all Makefile compilation rules..."
              sed -i.bak 's/$(CXX) $(CFLAGS_CXX) $(CXXFLAGS) $(CPPFLAGS_CXX) $(CPPFLAGS) -c/$(CXX) $(CFLAGS_CXX) -std=c++17 -stdlib=libc++ $(CXXFLAGS) $(CPPFLAGS_CXX) $(CPPFLAGS) -c/g' Makefile 2>/dev/null || echo "Could not update Makefile compilation rules"

              # Show what C++ flags are in the Makefile after all updates
              echo "C++ flags in Makefile after all updates:"
              grep -E "std=" Makefile | head -10 || echo "No std flags found in Makefile"

              # Set system-wide C++17 flags
              export CXXFLAGS="-std=c++17 -stdlib=libc++"
              export CFLAGS=""
              export CPPFLAGS="$CPPFLAGS"
              export CC=clang
              export CXX=clang++

              # Test C++17 compilation before building
              echo "Testing C++17 compilation before build:"
              echo '#include <type_traits>' > test_cpp17.cpp
              echo 'int main() { std::enable_if_t<true, int> x = 0; std::is_same_v<int, int> y = true; return 0; }' >> test_cpp17.cpp
              if clang++ -std=c++17 -stdlib=libc++ test_cpp17.cpp -o test_cpp17 2>/dev/null; then
                echo "C++17 compilation test passed"
                rm -f test_cpp17.cpp test_cpp17
              else
                echo "C++17 compilation test failed"
                rm -f test_cpp17.cpp test_cpp17
              fi

              # Use a more aggressive approach - override the compiler
              echo "Using aggressive C++17 enforcement..."

              # Create a wrapper script that forces C++17
              echo '#!/bin/bash' > cxx17_wrapper.sh
              echo 'exec clang++ -std=c++17 -stdlib=libc++ "$@"' >> cxx17_wrapper.sh
              chmod +x cxx17_wrapper.sh

              # Use the wrapper script as the C++ compiler
              make -j$JOBS CXXFLAGS="-std=c++17 -stdlib=libc++" CFLAGS="" CPPFLAGS="$CPPFLAGS" CC="clang" CXX="./cxx17_wrapper.sh"
            else
              echo "Making with explicit C++14 flags:"
              echo "  CXXFLAGS: -std=c++14 -stdlib=libc++"
              echo "  CFLAGS: (empty)"
              echo "  CPPFLAGS: $CPPFLAGS"
              make -j$JOBS CXXFLAGS="-std=c++14 -stdlib=libc++" CFLAGS="" CPPFLAGS="$CPPFLAGS"
            fi
          else
            make -j$JOBS
          fi

      - name: Install PHP
        run: |
          cd ${{ env.PHP_SOURCE_DIR }}
          make install

          # Verify installation
          INSTALL_PREFIX="${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}"
          "$INSTALL_PREFIX/bin/php" --version
          "$INSTALL_PREFIX/bin/php" -m # Show loaded modules

          # Generate a default php.ini to ensure DB extensions are enabled by default
          echo "Generating default php.ini for configuration: ${{ matrix.config }}"
          EXT_DIR=$("$INSTALL_PREFIX/bin/php-config" --extension-dir 2>/dev/null || echo "")
          PHP_INI_DIR="$INSTALL_PREFIX/lib"
          mkdir -p "$PHP_INI_DIR"
          PHP_INI="$PHP_INI_DIR/php.ini"
          {
            echo "; Launchpad php.ini (auto-generated in CI)"
            echo "memory_limit = 512M"
            echo "max_execution_time = 300"
            echo "upload_max_filesize = 64M"
            echo "post_max_size = 64M"
            echo "display_errors = On"
            echo "error_reporting = E_ALL"
            if [ -n "$EXT_DIR" ]; then
              echo "extension_dir = \"$EXT_DIR\""
            fi
            case "${{ matrix.config }}" in
              "laravel-postgres")
                echo "extension=pdo_pgsql"
                echo "extension=pgsql"
                ;;
              "laravel-mysql")
                echo "extension=pdo_mysql"
                echo "extension=mysqli"
                ;;
              "laravel-sqlite")
                echo "extension=pdo_sqlite"
                echo "extension=sqlite3"
                ;;
              "enterprise"|"full-stack")
                echo "extension=pdo_pgsql"
                echo "extension=pgsql"
                echo "extension=pdo_mysql"
                echo "extension=mysqli"
                echo "extension=pdo_sqlite"
                echo "extension=sqlite3"
                ;;
              *)
                :
                ;;
            esac
          } > "$PHP_INI"
          echo "Created $PHP_INI"

      - name: Create binary package
        run: |
          cd ${{ env.OUTPUT_DIR }}

          # Create metadata file
          cat > ${{ env.BINARY_NAME }}/metadata.json << EOF
          {
            "php_version": "${{ matrix.php_version }}",
            "platform": "${{ matrix.platform }}",
            "architecture": "${{ matrix.arch }}",
            "configuration": "${{ matrix.config }}",
            "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "built_by": "GitHub Actions",
            "commit": "${{ github.sha }}",
            "extensions": "$(echo '${{ env.CONFIGURE_EXTENSIONS }}' | tr ' ' '\n' | grep -E '^--(enable|with)-' | sed 's/^--[^-]*-//' | sort | tr '\n' ',' | sed 's/,$//')"
          }
          EOF

          # Create tarball
          tar -czf ${{ env.BINARY_NAME }}.tar.gz ${{ env.BINARY_NAME }}/

          # Show package info
          echo "Created package: ${{ env.BINARY_NAME }}.tar.gz"
          ls -lh ${{ env.BINARY_NAME }}.tar.gz

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.OUTPUT_DIR }}/${{ env.BINARY_NAME }}.tar.gz
          retention-days: 90

      - name: Upload to GitHub Container Registry (Linux)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.platform == 'linux'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY_URL }} -u ${{ env.REGISTRY_USERNAME }} --password-stdin

          # Create a simple Dockerfile for the binary
          cd ${{ env.OUTPUT_DIR }}
          cat > Dockerfile << EOF
          FROM scratch
          COPY ${{ env.BINARY_NAME }}.tar.gz /php-binary.tar.gz
          EOF

          # Build and push
          IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/php-binaries:${{ env.BINARY_NAME }}"
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"

  # Release job to create GitHub releases with binaries
  create-release:
    needs: [check-for-updates, build-matrix, get-php-versions]
    runs-on: ubuntu-latest
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch') && (needs.check-for-updates.outputs.rebuild_needed == 'true' || github.event.inputs.force_rebuild == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get PHP versions
        id: get-versions
        run: |
          # Get dynamic PHP versions using our custom script
          PHP_VERSIONS=$(bun scripts/get-php-versions.ts | grep "JSON output for GitHub Actions:" -A 1 | tail -1)
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "üîç Dynamic PHP versions: $PHP_VERSIONS"

      - name: Format PHP versions for release
        id: format-versions
        run: |
          # Convert JSON array to comma-separated string
          PHP_VERSIONS_JSON='${{ needs.get-php-versions.outputs.php_versions }}'
          PHP_VERSIONS_STRING=$(echo "$PHP_VERSIONS_JSON" | jq -r 'join(", ")')
          echo "php_versions_string=$PHP_VERSIONS_STRING" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: binaries/

      - name: Create release manifest
        run: |
          cd binaries/

          # Debug: Show what we have
          echo "üîç Current directory structure:"
          ls -la
          echo ""
          echo "üîç Looking for tar.gz files:"
          find . -name "*.tar.gz" -type f
          echo ""

          # Create a temporary JSON array file
          echo "[]" > binaries_array.json

          # Find all tar.gz files recursively and process them
          for tarball in $(find . -name "*.tar.gz" -type f); do
            filename=$(basename "$tarball")
            size=$(stat -c%s "$tarball" 2>/dev/null || stat -f%z "$tarball")

            echo "Processing: $filename (size: $size bytes)"

            # Extract metadata from tarball if available
            tar -xzOf "$tarball" "*/metadata.json" > temp_metadata.json 2>/dev/null || echo '{}' > temp_metadata.json

            # Parse the binary name to extract components
            # Expected format: php-8.4.11-darwin-arm64-laravel-mysql.tar.gz
            binary_name=$(echo "$filename" | sed 's/\.tar\.gz$//')

            # Extract components from binary name
            if [[ "$binary_name" =~ ^php-([^-]+)-([^-]+)-([^-]+)-(.+)$ ]]; then
              php_version="${BASH_REMATCH[1]}"
              platform="${BASH_REMATCH[2]}"
              architecture="${BASH_REMATCH[3]}"
              configuration="${BASH_REMATCH[4]}"
            else
              # Fallback if pattern doesn't match
              php_version="unknown"
              platform="unknown"
              architecture="unknown"
              configuration="unknown"
            fi

            # Create JSON object for this binary
            binary_json=$(jq -n \
              --arg filename "$filename" \
              --arg size "$size" \
              --arg php_version "$php_version" \
              --arg platform "$platform" \
              --arg architecture "$architecture" \
              --arg configuration "$configuration" \
              --arg built_at "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg extensions "$(cat temp_metadata.json | jq -r '.extensions // ""' 2>/dev/null || echo '')" \
              '{
                filename: $filename,
                size: ($size | tonumber),
                php_version: $php_version,
                platform: $platform,
                architecture: $architecture,
                configuration: $configuration,
                built_at: $built_at,
                extensions: $extensions
              }')

            # Add this binary to the array using jq
            jq --argjson binary "$binary_json" '. += [$binary]' binaries_array.json > temp_array.json
            mv temp_array.json binaries_array.json
          done

          # Create the final manifest with proper structure and sorted binaries
          jq --arg version "$(date +%Y.%m.%d)" \
             --arg built_at "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             --arg commit "${{ github.sha }}" \
             '{
               version: $version,
               built_at: $built_at,
               commit: $commit,
               binaries: (. | sort_by(.php_version))
             }' binaries_array.json > manifest.json

          # Clean up temporary files
          rm -f binaries_array.json temp_metadata.json

          echo ""
          echo "üìã Generated manifest.json:"
          cat manifest.json
          echo ""
          echo "üìä Summary:"
          echo "  - Total binaries found: $(find . -name "*.tar.gz" -type f | wc -l)"
          echo "  - Manifest file size: $(stat -c%s manifest.json 2>/dev/null || stat -f%z manifest.json) bytes"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: binaries-${{ github.run_number }}
          name: PHP Binaries - Build ${{ github.run_number }}
          body: |
            üöÄ **PHP Precompiled Binaries**

            > This release contains precompiled PHP binaries optimized for modern PHP usage

            - **Platforms**: Linux (x86_64), macOS (ARM64 & Intel)
            - **PHP Versions**: ${{ steps.format-versions.outputs.php_versions_string }}
            - **Configuration Options**:
              - `laravel-mysql`: Laravel applications using MySQL or MariaDB
              - `laravel-postgres`: Laravel applications using PostgreSQL
              - `laravel-sqlite`: Laravel applications using SQLite
              - `api-only`: Minimal footprint for API-only applications
              - `enterprise`: Full-featured configuration for enterprise applications
              - `wordpress`: WordPress optimized build
              - `full-stack`: Complete PHP build with major extensions and database drivers

            üì¶ **Usage with Launchpad**:
            You may use these however, but if you are looking for automation, these binaries are automatically downloaded by Launchpad instead of compiling from source.

            üîß **Built from commit**: ${{ github.sha }}
            üîÑ **Update Reason**: ${{ needs.check-for-updates.outputs.reason }}

            See `manifest.json` for detailed information about each binary.
          files: |
            binaries/**/*.tar.gz
            binaries/manifest.json
          draft: false
          prerelease: false
